-- Level - 2

-- Find the total number of books in the Books table.

select * from books

select sum(stock_quantity) from Books

-- Calculate the total stock value (price * stock_quantity) for each book.

select book_id, price * stock_quantity as books_value from Books 

-- Show the average book price in the store.

select AVG(price) from books

-- Find how many orders each customer has placed.

select * from orders

select customer_id, count(book_id) as book_count from orders group by customer_id

-- Display customers who placed more than 1 order.

select customer_id, count(* ) from orders group by customer_id having count(*) >1

-- LEVEL 3 — JOINS

-- Show all orders along with the customer’s full name and book title.


select c.first_name, c.last_name, b.title 
from Customers c 
JOIN Orders o on c.customer_id = o.customer_id
JOIN Books b on o.book_id = b.book_id

select * from Books
select * from Customers
select * from Orders


-- Find the total quantity of books ordered by each customer.

select c.customer_id,c.first_name, c.last_name, sum(o.quantity )
from Customers c 
JOIN Orders o on c.customer_id = o.customer_id
JOIN Books b on o.book_id = b.book_id
group by c.customer_id,c.first_name, c.last_name



-- List customers who ordered ‘SQL Fundamentals’.

select c.customer_id,c.first_name, c.last_name, b.title
from Customers c 
JOIN Orders o on c.customer_id = o.customer_id
JOIN Books b on o.book_id = b.book_id
where b.title = 'SQL Fundamentals'


-- Show all books that have never been ordered.

delete from Orders where book_id = 3

select title from Books where book_id not in (select book_id from Orders )

select * from Books
select * from Customers
select * from Orders


-- Show the most recent order date for each customer.

select c.customer_id, MAX(o.order_date)
from Customers c 
JOIN Orders o on c.customer_id = o.customer_id 
group by c.customer_id
